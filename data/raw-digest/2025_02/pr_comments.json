[
  {
    "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944913154",
    "pull_request_review_id":2598996904,
    "id":1944913154,
    "node_id":"PRRC_kwDOAlVrjc5z7QUC",
    "diff_hunk":"@@ -293,19 +294,53 @@ Primary key (`trip_id`, `stop_sequence`)\n |  `stop_headsign` | Text | Optional | Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, `trips.trip_headsign` should be used instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row. |\n | `start_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service becomes available in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `end_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise.  |\n | `end_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service ends in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `start_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise. |\n-|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n-|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_pickup` | Enum | **Conditionally Forbidden** | Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_drop_off` | Enum | **Conditionally Forbidden** | Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `shape_dist_traveled` | Non-negative float | Optional | Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they must not be used to show reverse travel along a route.<br><br>Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See [`shapes.shape_dist_traveled`](#shapestxt). <hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*|\n |  `timepoint` | Enum | Optional | Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and\/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate. <br>`1` - Times are considered exact. <br><br> All records of [stop_times.txt](#stop_timestxt) with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact. |\n | `pickup_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the boarding booking rule at this stop time.<br><br>Recommended when `pickup_type=2`. |\n | `drop_off_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the alighting booking rule at this stop time.<br><br>Recommended when `drop_off_type=2`. |\n+| `boarding_permission_id` | Foreign ID referencing `boarding_permissions.boarding_permission_id` | Optional | Identifies a boarding permission. |\n \n #### On-demand Service Routing Behavior\n - When providing routing or travel time between the origin and destination, data consumers should ignore intermediate stop_times.txt records with the same `trip_id` that have `start_pickup_drop_off_window` and `end_pickup_drop_off_window` defined. For examples that demonstrate what should be ignored, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#ignoring-intermediate-stop-times-records-with-pickupdrop-off-windows).\n - Simultaneous overlap of locations.geojson `id` geometry, `start\/end_pickup_drop_off_window` time, and `pickup_type` or `drop_off_type` between two or more stop_times.txt records with the same `trip_id` is forbidden. For examples that demonstrate what is forbidden, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#zone-overlap-constraint).\n \n+### boarding_permissions.txt\n+\n+File: **Optional**\n+\n+Primary key (`boarding_permission_id`, `vehicle`, `start_time`)\n+\n+The [boarding_permissions.txt](#boarding_permissionstxt) table defines which vehicles may board, alight or be carried on a service.\n+\n+A vehicle can only be carried if the `pickup_permission` allows it at the origin stop,\n+the `carriage_permission` allows it for every stop from the boarding stop until the stop before the alighting stop,\n+and the `drop_off_permission` allows it at the alighting stop.\n+\n+If specified for a vehicle, if overrides the `pickup_type` and `drop_off_type` in `stop_times.txt` for passengers with that vehicle.\n+To specify a vehicle is required for a passenger to use a service, set `pickup_type` and `drop_off_type` to be `1` in `stop_times.txt`,\n+and set `boarding_permission_id` to reference an entry for the required vehicle in `boarding_permissions.txt`.\n+\n+| Field Name                | \tType      | Presence\t               | Description                                                                                                                                                                                                                                                                                                 |\n+|---------------------------|------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `boarding_permission_id`\t | Unique ID\t | Required\t               | Identifies a boarding_permission.                                                                                                                                                                                                                                                                           |\n+| `vehicle`                 | Enum       | Required\t               | Identifies a vehicle. `0` - Wheelchair. `1` - Bike. `2` - Motorcycle. `3` - Car.                                                                                                                                                                                                                            |",
    "path":"gtfs\/spec\/en\/reference.md",
    "commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "original_commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "user":{
      "login":"paulswartz",
      "id":214921,
      "node_id":"MDQ6VXNlcjIxNDkyMQ==",
      "avatar_url":"https:\/\/avatars.githubusercontent.com\/u\/214921?v=4",
      "gravatar_id":"",
      "url":"https:\/\/api.github.com\/users\/paulswartz",
      "html_url":"https:\/\/github.com\/paulswartz",
      "followers_url":"https:\/\/api.github.com\/users\/paulswartz\/followers",
      "following_url":"https:\/\/api.github.com\/users\/paulswartz\/following{\/other_user}",
      "gists_url":"https:\/\/api.github.com\/users\/paulswartz\/gists{\/gist_id}",
      "starred_url":"https:\/\/api.github.com\/users\/paulswartz\/starred{\/owner}{\/repo}",
      "subscriptions_url":"https:\/\/api.github.com\/users\/paulswartz\/subscriptions",
      "organizations_url":"https:\/\/api.github.com\/users\/paulswartz\/orgs",
      "repos_url":"https:\/\/api.github.com\/users\/paulswartz\/repos",
      "events_url":"https:\/\/api.github.com\/users\/paulswartz\/events{\/privacy}",
      "received_events_url":"https:\/\/api.github.com\/users\/paulswartz\/received_events",
      "type":"User",
      "user_view_type":"public",
      "site_admin":false
    },
    "body":"question: should this have a different name? at the moment, everything in GTFS\/GTFS-RT which uses `vehicle` is a transit vehicle (bus\/train\/&c).",
    "created_at":"2025-02-06T15:18:17Z",
    "updated_at":"2025-02-06T15:23:53Z",
    "html_url":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1944913154",
    "pull_request_url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533",
    "author_association":"CONTRIBUTOR",
    "_links":{
      "self":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944913154"
      },
      "html":{
        "href":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1944913154"
      },
      "pull_request":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533"
      }
    },
    "reactions":{
      "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944913154\/reactions",
      "total_count":0,
      "+1":0,
      "-1":0,
      "laugh":0,
      "hooray":0,
      "confused":0,
      "heart":0,
      "rocket":0,
      "eyes":0
    },
    "start_line":null,
    "original_start_line":null,
    "start_side":null,
    "line":330,
    "original_line":330,
    "side":"RIGHT",
    "original_position":58,
    "position":58,
    "subject_type":"line",
    "in_reply_to_id":null
  },
  {
    "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944914934",
    "pull_request_review_id":2598996904,
    "id":1944914934,
    "node_id":"PRRC_kwDOAlVrjc5z7Qv2",
    "diff_hunk":"@@ -293,19 +294,53 @@ Primary key (`trip_id`, `stop_sequence`)\n |  `stop_headsign` | Text | Optional | Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, `trips.trip_headsign` should be used instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row. |\n | `start_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service becomes available in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `end_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise.  |\n | `end_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service ends in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `start_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise. |\n-|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n-|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_pickup` | Enum | **Conditionally Forbidden** | Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_drop_off` | Enum | **Conditionally Forbidden** | Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `shape_dist_traveled` | Non-negative float | Optional | Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they must not be used to show reverse travel along a route.<br><br>Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See [`shapes.shape_dist_traveled`](#shapestxt). <hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*|\n |  `timepoint` | Enum | Optional | Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and\/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate. <br>`1` - Times are considered exact. <br><br> All records of [stop_times.txt](#stop_timestxt) with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact. |\n | `pickup_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the boarding booking rule at this stop time.<br><br>Recommended when `pickup_type=2`. |\n | `drop_off_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the alighting booking rule at this stop time.<br><br>Recommended when `drop_off_type=2`. |\n+| `boarding_permission_id` | Foreign ID referencing `boarding_permissions.boarding_permission_id` | Optional | Identifies a boarding permission. |\n \n #### On-demand Service Routing Behavior\n - When providing routing or travel time between the origin and destination, data consumers should ignore intermediate stop_times.txt records with the same `trip_id` that have `start_pickup_drop_off_window` and `end_pickup_drop_off_window` defined. For examples that demonstrate what should be ignored, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#ignoring-intermediate-stop-times-records-with-pickupdrop-off-windows).\n - Simultaneous overlap of locations.geojson `id` geometry, `start\/end_pickup_drop_off_window` time, and `pickup_type` or `drop_off_type` between two or more stop_times.txt records with the same `trip_id` is forbidden. For examples that demonstrate what is forbidden, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#zone-overlap-constraint).\n \n+### boarding_permissions.txt\n+\n+File: **Optional**\n+\n+Primary key (`boarding_permission_id`, `vehicle`, `start_time`)\n+\n+The [boarding_permissions.txt](#boarding_permissionstxt) table defines which vehicles may board, alight or be carried on a service.\n+\n+A vehicle can only be carried if the `pickup_permission` allows it at the origin stop,\n+the `carriage_permission` allows it for every stop from the boarding stop until the stop before the alighting stop,\n+and the `drop_off_permission` allows it at the alighting stop.\n+\n+If specified for a vehicle, if overrides the `pickup_type` and `drop_off_type` in `stop_times.txt` for passengers with that vehicle.\n+To specify a vehicle is required for a passenger to use a service, set `pickup_type` and `drop_off_type` to be `1` in `stop_times.txt`,\n+and set `boarding_permission_id` to reference an entry for the required vehicle in `boarding_permissions.txt`.\n+\n+| Field Name                | \tType      | Presence\t               | Description                                                                                                                                                                                                                                                                                                 |\n+|---------------------------|------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `boarding_permission_id`\t | Unique ID\t | Required\t               | Identifies a boarding_permission.                                                                                                                                                                                                                                                                           |\n+| `vehicle`                 | Enum       | Required\t               | Identifies a vehicle. `0` - Wheelchair. `1` - Bike. `2` - Motorcycle. `3` - Car.                                                                                                                                                                                                                            |",
    "path":"gtfs\/spec\/en\/reference.md",
    "commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "original_commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "user":{
      "login":"paulswartz",
      "id":214921,
      "node_id":"MDQ6VXNlcjIxNDkyMQ==",
      "avatar_url":"https:\/\/avatars.githubusercontent.com\/u\/214921?v=4",
      "gravatar_id":"",
      "url":"https:\/\/api.github.com\/users\/paulswartz",
      "html_url":"https:\/\/github.com\/paulswartz",
      "followers_url":"https:\/\/api.github.com\/users\/paulswartz\/followers",
      "following_url":"https:\/\/api.github.com\/users\/paulswartz\/following{\/other_user}",
      "gists_url":"https:\/\/api.github.com\/users\/paulswartz\/gists{\/gist_id}",
      "starred_url":"https:\/\/api.github.com\/users\/paulswartz\/starred{\/owner}{\/repo}",
      "subscriptions_url":"https:\/\/api.github.com\/users\/paulswartz\/subscriptions",
      "organizations_url":"https:\/\/api.github.com\/users\/paulswartz\/orgs",
      "repos_url":"https:\/\/api.github.com\/users\/paulswartz\/repos",
      "events_url":"https:\/\/api.github.com\/users\/paulswartz\/events{\/privacy}",
      "received_events_url":"https:\/\/api.github.com\/users\/paulswartz\/received_events",
      "type":"User",
      "user_view_type":"public",
      "site_admin":false
    },
    "body":"question: is it worth distinguishing between \"Bike\" and \"Folding Bike\"? For @mbta, general bikes are restricted, but folding bikes (when folded) are always allowed: https:\/\/www.mbta.com\/bikes",
    "created_at":"2025-02-06T15:19:12Z",
    "updated_at":"2025-02-06T15:23:53Z",
    "html_url":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1944914934",
    "pull_request_url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533",
    "author_association":"CONTRIBUTOR",
    "_links":{
      "self":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944914934"
      },
      "html":{
        "href":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1944914934"
      },
      "pull_request":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533"
      }
    },
    "reactions":{
      "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1944914934\/reactions",
      "total_count":0,
      "+1":0,
      "-1":0,
      "laugh":0,
      "hooray":0,
      "confused":0,
      "heart":0,
      "rocket":0,
      "eyes":0
    },
    "start_line":null,
    "original_start_line":null,
    "start_side":null,
    "line":330,
    "original_line":330,
    "side":"RIGHT",
    "original_position":58,
    "position":58,
    "subject_type":"line",
    "in_reply_to_id":null
  },
  {
    "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946254906",
    "pull_request_review_id":2601277169,
    "id":1946254906,
    "node_id":"PRRC_kwDOAlVrjc50AX46",
    "diff_hunk":"@@ -293,19 +294,53 @@ Primary key (`trip_id`, `stop_sequence`)\n |  `stop_headsign` | Text | Optional | Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, `trips.trip_headsign` should be used instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row. |\n | `start_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service becomes available in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `end_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise.  |\n | `end_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service ends in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `start_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise. |\n-|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n-|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_pickup` | Enum | **Conditionally Forbidden** | Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_drop_off` | Enum | **Conditionally Forbidden** | Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `shape_dist_traveled` | Non-negative float | Optional | Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they must not be used to show reverse travel along a route.<br><br>Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See [`shapes.shape_dist_traveled`](#shapestxt). <hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*|\n |  `timepoint` | Enum | Optional | Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and\/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate. <br>`1` - Times are considered exact. <br><br> All records of [stop_times.txt](#stop_timestxt) with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact. |\n | `pickup_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the boarding booking rule at this stop time.<br><br>Recommended when `pickup_type=2`. |\n | `drop_off_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the alighting booking rule at this stop time.<br><br>Recommended when `drop_off_type=2`. |\n+| `boarding_permission_id` | Foreign ID referencing `boarding_permissions.boarding_permission_id` | Optional | Identifies a boarding permission. |\n \n #### On-demand Service Routing Behavior\n - When providing routing or travel time between the origin and destination, data consumers should ignore intermediate stop_times.txt records with the same `trip_id` that have `start_pickup_drop_off_window` and `end_pickup_drop_off_window` defined. For examples that demonstrate what should be ignored, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#ignoring-intermediate-stop-times-records-with-pickupdrop-off-windows).\n - Simultaneous overlap of locations.geojson `id` geometry, `start\/end_pickup_drop_off_window` time, and `pickup_type` or `drop_off_type` between two or more stop_times.txt records with the same `trip_id` is forbidden. For examples that demonstrate what is forbidden, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#zone-overlap-constraint).\n \n+### boarding_permissions.txt\n+\n+File: **Optional**\n+\n+Primary key (`boarding_permission_id`, `vehicle`, `start_time`)\n+\n+The [boarding_permissions.txt](#boarding_permissionstxt) table defines which vehicles may board, alight or be carried on a service.\n+\n+A vehicle can only be carried if the `pickup_permission` allows it at the origin stop,\n+the `carriage_permission` allows it for every stop from the boarding stop until the stop before the alighting stop,\n+and the `drop_off_permission` allows it at the alighting stop.\n+\n+If specified for a vehicle, if overrides the `pickup_type` and `drop_off_type` in `stop_times.txt` for passengers with that vehicle.\n+To specify a vehicle is required for a passenger to use a service, set `pickup_type` and `drop_off_type` to be `1` in `stop_times.txt`,\n+and set `boarding_permission_id` to reference an entry for the required vehicle in `boarding_permissions.txt`.\n+\n+| Field Name                | \tType      | Presence\t               | Description                                                                                                                                                                                                                                                                                                 |\n+|---------------------------|------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `boarding_permission_id`\t | Unique ID\t | Required\t               | Identifies a boarding_permission.                                                                                                                                                                                                                                                                           |\n+| `vehicle`                 | Enum       | Required\t               | Identifies a vehicle. `0` - Wheelchair. `1` - Bike. `2` - Motorcycle. `3` - Car.                                                                                                                                                                                                                            |",
    "path":"gtfs\/spec\/en\/reference.md",
    "commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "original_commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "user":{
      "login":"miklcct",
      "id":2827264,
      "node_id":"MDQ6VXNlcjI4MjcyNjQ=",
      "avatar_url":"https:\/\/avatars.githubusercontent.com\/u\/2827264?v=4",
      "gravatar_id":"",
      "url":"https:\/\/api.github.com\/users\/miklcct",
      "html_url":"https:\/\/github.com\/miklcct",
      "followers_url":"https:\/\/api.github.com\/users\/miklcct\/followers",
      "following_url":"https:\/\/api.github.com\/users\/miklcct\/following{\/other_user}",
      "gists_url":"https:\/\/api.github.com\/users\/miklcct\/gists{\/gist_id}",
      "starred_url":"https:\/\/api.github.com\/users\/miklcct\/starred{\/owner}{\/repo}",
      "subscriptions_url":"https:\/\/api.github.com\/users\/miklcct\/subscriptions",
      "organizations_url":"https:\/\/api.github.com\/users\/miklcct\/orgs",
      "repos_url":"https:\/\/api.github.com\/users\/miklcct\/repos",
      "events_url":"https:\/\/api.github.com\/users\/miklcct\/events{\/privacy}",
      "received_events_url":"https:\/\/api.github.com\/users\/miklcct\/received_events",
      "type":"User",
      "user_view_type":"public",
      "site_admin":false
    },
    "body":"Can you make a suggestion of a name to use?",
    "created_at":"2025-02-07T09:46:25Z",
    "updated_at":"2025-02-07T09:46:25Z",
    "html_url":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1946254906",
    "pull_request_url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533",
    "author_association":"CONTRIBUTOR",
    "_links":{
      "self":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946254906"
      },
      "html":{
        "href":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1946254906"
      },
      "pull_request":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533"
      }
    },
    "reactions":{
      "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946254906\/reactions",
      "total_count":0,
      "+1":0,
      "-1":0,
      "laugh":0,
      "hooray":0,
      "confused":0,
      "heart":0,
      "rocket":0,
      "eyes":0
    },
    "start_line":null,
    "original_start_line":null,
    "start_side":null,
    "line":330,
    "original_line":330,
    "side":"RIGHT",
    "original_position":58,
    "position":58,
    "subject_type":"line",
    "in_reply_to_id":1944913154.0
  },
  {
    "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946256765",
    "pull_request_review_id":2601280167,
    "id":1946256765,
    "node_id":"PRRC_kwDOAlVrjc50AYV9",
    "diff_hunk":"@@ -293,19 +294,53 @@ Primary key (`trip_id`, `stop_sequence`)\n |  `stop_headsign` | Text | Optional | Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, `trips.trip_headsign` should be used instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row. |\n | `start_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service becomes available in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `end_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise.  |\n | `end_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service ends in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `start_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise. |\n-|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n-|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_pickup` | Enum | **Conditionally Forbidden** | Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_drop_off` | Enum | **Conditionally Forbidden** | Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `shape_dist_traveled` | Non-negative float | Optional | Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they must not be used to show reverse travel along a route.<br><br>Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See [`shapes.shape_dist_traveled`](#shapestxt). <hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*|\n |  `timepoint` | Enum | Optional | Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and\/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate. <br>`1` - Times are considered exact. <br><br> All records of [stop_times.txt](#stop_timestxt) with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact. |\n | `pickup_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the boarding booking rule at this stop time.<br><br>Recommended when `pickup_type=2`. |\n | `drop_off_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the alighting booking rule at this stop time.<br><br>Recommended when `drop_off_type=2`. |\n+| `boarding_permission_id` | Foreign ID referencing `boarding_permissions.boarding_permission_id` | Optional | Identifies a boarding permission. |\n \n #### On-demand Service Routing Behavior\n - When providing routing or travel time between the origin and destination, data consumers should ignore intermediate stop_times.txt records with the same `trip_id` that have `start_pickup_drop_off_window` and `end_pickup_drop_off_window` defined. For examples that demonstrate what should be ignored, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#ignoring-intermediate-stop-times-records-with-pickupdrop-off-windows).\n - Simultaneous overlap of locations.geojson `id` geometry, `start\/end_pickup_drop_off_window` time, and `pickup_type` or `drop_off_type` between two or more stop_times.txt records with the same `trip_id` is forbidden. For examples that demonstrate what is forbidden, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#zone-overlap-constraint).\n \n+### boarding_permissions.txt\n+\n+File: **Optional**\n+\n+Primary key (`boarding_permission_id`, `vehicle`, `start_time`)\n+\n+The [boarding_permissions.txt](#boarding_permissionstxt) table defines which vehicles may board, alight or be carried on a service.\n+\n+A vehicle can only be carried if the `pickup_permission` allows it at the origin stop,\n+the `carriage_permission` allows it for every stop from the boarding stop until the stop before the alighting stop,\n+and the `drop_off_permission` allows it at the alighting stop.\n+\n+If specified for a vehicle, if overrides the `pickup_type` and `drop_off_type` in `stop_times.txt` for passengers with that vehicle.\n+To specify a vehicle is required for a passenger to use a service, set `pickup_type` and `drop_off_type` to be `1` in `stop_times.txt`,\n+and set `boarding_permission_id` to reference an entry for the required vehicle in `boarding_permissions.txt`.\n+\n+| Field Name                | \tType      | Presence\t               | Description                                                                                                                                                                                                                                                                                                 |\n+|---------------------------|------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `boarding_permission_id`\t | Unique ID\t | Required\t               | Identifies a boarding_permission.                                                                                                                                                                                                                                                                           |\n+| `vehicle`                 | Enum       | Required\t               | Identifies a vehicle. `0` - Wheelchair. `1` - Bike. `2` - Motorcycle. `3` - Car.                                                                                                                                                                                                                            |",
    "path":"gtfs\/spec\/en\/reference.md",
    "commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "original_commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "user":{
      "login":"miklcct",
      "id":2827264,
      "node_id":"MDQ6VXNlcjI4MjcyNjQ=",
      "avatar_url":"https:\/\/avatars.githubusercontent.com\/u\/2827264?v=4",
      "gravatar_id":"",
      "url":"https:\/\/api.github.com\/users\/miklcct",
      "html_url":"https:\/\/github.com\/miklcct",
      "followers_url":"https:\/\/api.github.com\/users\/miklcct\/followers",
      "following_url":"https:\/\/api.github.com\/users\/miklcct\/following{\/other_user}",
      "gists_url":"https:\/\/api.github.com\/users\/miklcct\/gists{\/gist_id}",
      "starred_url":"https:\/\/api.github.com\/users\/miklcct\/starred{\/owner}{\/repo}",
      "subscriptions_url":"https:\/\/api.github.com\/users\/miklcct\/subscriptions",
      "organizations_url":"https:\/\/api.github.com\/users\/miklcct\/orgs",
      "repos_url":"https:\/\/api.github.com\/users\/miklcct\/repos",
      "events_url":"https:\/\/api.github.com\/users\/miklcct\/events{\/privacy}",
      "received_events_url":"https:\/\/api.github.com\/users\/miklcct\/received_events",
      "type":"User",
      "user_view_type":"public",
      "site_admin":false
    },
    "body":"Yes, I will add a clarification for this such that the value only applies to full sized bikes. I don't want to define folded bikes for now as they are commonly considered luggage.",
    "created_at":"2025-02-07T09:47:44Z",
    "updated_at":"2025-02-07T09:47:44Z",
    "html_url":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1946256765",
    "pull_request_url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533",
    "author_association":"CONTRIBUTOR",
    "_links":{
      "self":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946256765"
      },
      "html":{
        "href":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1946256765"
      },
      "pull_request":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533"
      }
    },
    "reactions":{
      "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1946256765\/reactions",
      "total_count":0,
      "+1":0,
      "-1":0,
      "laugh":0,
      "hooray":0,
      "confused":0,
      "heart":0,
      "rocket":0,
      "eyes":0
    },
    "start_line":null,
    "original_start_line":null,
    "start_side":null,
    "line":330,
    "original_line":330,
    "side":"RIGHT",
    "original_position":58,
    "position":58,
    "subject_type":"line",
    "in_reply_to_id":1944914934.0
  },
  {
    "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1967682371",
    "pull_request_review_id":2637167927,
    "id":1967682371,
    "node_id":"PRRC_kwDOAlVrjc51SHND",
    "diff_hunk":"@@ -293,19 +294,53 @@ Primary key (`trip_id`, `stop_sequence`)\n |  `stop_headsign` | Text | Optional | Text that appears on signage identifying the trip's destination to riders. This field overrides the default `trips.trip_headsign` when the headsign changes between stops. If the headsign is displayed for an entire trip, `trips.trip_headsign` should be used instead. <br><br>  A `stop_headsign` value specified for one `stop_time` does not apply to subsequent `stop_time`s in the same trip. If you want to override the `trip_headsign` for multiple `stop_time`s in the same trip, the `stop_headsign` value must be repeated in each `stop_time` row. |\n | `start_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service becomes available in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `end_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise.  |\n | `end_pickup_drop_off_window` | Time | **Conditionally Required** | Time that on-demand service ends in a GeoJSON location, location group, or stop.<br><br>**Conditionally Required**:<br>- **Required** if `stop_times.location_group_id` or `stop_times.location_id` is defined.<br>- **Required** if `start_pickup_drop_off_window` is defined.<br>- **Forbidden** if `arrival_time` or `departure_time` is defined.<br>- Optional otherwise. |\n-|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n-|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `pickup_type` | Enum | **Conditionally Forbidden** | Indicates pickup method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled pickup. <br>`1` - No pickup available.<br>`2` - Must phone agency to arrange pickup.<br>`3` - Must coordinate with driver to arrange pickup.<br><br> **Conditionally Forbidden**: <br>- `pickup_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - `pickup_type=3` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n+|  `drop_off_type` | Enum | **Conditionally Forbidden** | Indicates drop off method. Can be overridden by `boarding_permission_id` if the passenger is travelling with a vehicle. Valid options are:<br><br>`0` or empty - Regularly scheduled drop off.<br>`1` - No drop off available.<br>`2` - Must phone agency to arrange drop off.<br>`3` - Must coordinate with driver to arrange drop off.<br><br> **Conditionally Forbidden**:<br> - `drop_off_type=0` **forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_pickup` | Enum | **Conditionally Forbidden** | Indicates that the rider can board the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping pickup. <br>`1` or empty - No continuous stopping pickup. <br>`2` - Must phone agency to arrange continuous stopping pickup. <br>`3` - Must coordinate with driver to arrange continuous stopping pickup.  <br><br>If this field is populated, it overrides any continuous pickup behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous pickup behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `continuous_drop_off` | Enum | **Conditionally Forbidden** | Indicates that the rider can alight from the transit vehicle at any point along the vehicle\u2019s travel path as described by [shapes.txt](#shapestxt), from this `stop_time` to the next `stop_time` in the trip\u2019s `stop_sequence`. Valid options are: <br><br>`0` - Continuous stopping drop off. <br>`1` or empty - No continuous stopping drop off. <br>`2` - Must phone agency to arrange continuous stopping drop off. <br>`3` - Must coordinate with driver to arrange continuous stopping drop off. <br><br>If this field is populated, it overrides any continuous drop-off behavior defined in [routes.txt](#routestxt). If this field is empty, the `stop_time` inherits any continuous drop-off behavior defined in [routes.txt](#routestxt).<br><br>**Conditionally Forbidden**:<br>- **Forbidden** if `start_pickup_drop_off_window` or `end_pickup_drop_off_window` are defined.<br> - Optional otherwise. |\n |  `shape_dist_traveled` | Non-negative float | Optional | Actual distance traveled along the associated shape, from the first stop to the stop specified in this record. This field specifies how much of the shape to draw between any two stops during a trip. Must be in the same units used in [shapes.txt](#shapestxt). Values used for `shape_dist_traveled` must increase along with `stop_sequence`; they must not be used to show reverse travel along a route.<br><br>Recommended for routes that have looping or inlining (the vehicle crosses or travels over the same portion of alignment in one trip). See [`shapes.shape_dist_traveled`](#shapestxt). <hr>*Example: If a bus travels a distance of 5.25 kilometers from the start of the shape to the stop,`shape_dist_traveled`=`5.25`.*|\n |  `timepoint` | Enum | Optional | Indicates if arrival and departure times for a stop are strictly adhered to by the vehicle or if they are instead approximate and\/or interpolated times. This field allows a GTFS producer to provide interpolated stop-times, while indicating that the times are approximate. Valid options are:<br><br>`0` - Times are considered approximate. <br>`1` - Times are considered exact. <br><br> All records of [stop_times.txt](#stop_timestxt) with defined arrival or departure times should have timepoint values populated. If no timepoint values are provided, all times are considered exact. |\n | `pickup_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the boarding booking rule at this stop time.<br><br>Recommended when `pickup_type=2`. |\n | `drop_off_booking_rule_id` | Foreign ID referencing `booking_rules.booking_rule_id` | Optional | Identifies the alighting booking rule at this stop time.<br><br>Recommended when `drop_off_type=2`. |\n+| `boarding_permission_id` | Foreign ID referencing `boarding_permissions.boarding_permission_id` | Optional | Identifies a boarding permission. |\n \n #### On-demand Service Routing Behavior\n - When providing routing or travel time between the origin and destination, data consumers should ignore intermediate stop_times.txt records with the same `trip_id` that have `start_pickup_drop_off_window` and `end_pickup_drop_off_window` defined. For examples that demonstrate what should be ignored, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#ignoring-intermediate-stop-times-records-with-pickupdrop-off-windows).\n - Simultaneous overlap of locations.geojson `id` geometry, `start\/end_pickup_drop_off_window` time, and `pickup_type` or `drop_off_type` between two or more stop_times.txt records with the same `trip_id` is forbidden. For examples that demonstrate what is forbidden, see [the data example page](https:\/\/gtfs.org\/schedule\/examples\/flex\/#zone-overlap-constraint).\n \n+### boarding_permissions.txt\n+\n+File: **Optional**\n+\n+Primary key (`boarding_permission_id`, `vehicle`, `start_time`)\n+\n+The [boarding_permissions.txt](#boarding_permissionstxt) table defines which vehicles may board, alight or be carried on a service.\n+\n+A vehicle can only be carried if the `pickup_permission` allows it at the origin stop,\n+the `carriage_permission` allows it for every stop from the boarding stop until the stop before the alighting stop,\n+and the `drop_off_permission` allows it at the alighting stop.\n+\n+If specified for a vehicle, if overrides the `pickup_type` and `drop_off_type` in `stop_times.txt` for passengers with that vehicle.\n+To specify a vehicle is required for a passenger to use a service, set `pickup_type` and `drop_off_type` to be `1` in `stop_times.txt`,\n+and set `boarding_permission_id` to reference an entry for the required vehicle in `boarding_permissions.txt`.\n+\n+| Field Name                | \tType      | Presence\t               | Description                                                                                                                                                                                                                                                                                                 |\n+|---------------------------|------------|-------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| `boarding_permission_id`\t | Unique ID\t | Required\t               | Identifies a boarding_permission.                                                                                                                                                                                                                                                                           |\n+| `vehicle`                 | Enum       | Required\t               | Identifies a vehicle. `0` - Wheelchair. `1` - Bike. `2` - Motorcycle. `3` - Car.                                                                                                                                                                                                                            |",
    "path":"gtfs\/spec\/en\/reference.md",
    "commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "original_commit_id":"d0846638075831afa64bae262c27ff481b5a3e3d",
    "user":{
      "login":"paulswartz",
      "id":214921,
      "node_id":"MDQ6VXNlcjIxNDkyMQ==",
      "avatar_url":"https:\/\/avatars.githubusercontent.com\/u\/214921?v=4",
      "gravatar_id":"",
      "url":"https:\/\/api.github.com\/users\/paulswartz",
      "html_url":"https:\/\/github.com\/paulswartz",
      "followers_url":"https:\/\/api.github.com\/users\/paulswartz\/followers",
      "following_url":"https:\/\/api.github.com\/users\/paulswartz\/following{\/other_user}",
      "gists_url":"https:\/\/api.github.com\/users\/paulswartz\/gists{\/gist_id}",
      "starred_url":"https:\/\/api.github.com\/users\/paulswartz\/starred{\/owner}{\/repo}",
      "subscriptions_url":"https:\/\/api.github.com\/users\/paulswartz\/subscriptions",
      "organizations_url":"https:\/\/api.github.com\/users\/paulswartz\/orgs",
      "repos_url":"https:\/\/api.github.com\/users\/paulswartz\/repos",
      "events_url":"https:\/\/api.github.com\/users\/paulswartz\/events{\/privacy}",
      "received_events_url":"https:\/\/api.github.com\/users\/paulswartz\/received_events",
      "type":"User",
      "user_view_type":"public",
      "site_admin":false
    },
    "body":"`cargo_vehicle` perhaps?",
    "created_at":"2025-02-24T13:53:12Z",
    "updated_at":"2025-02-24T13:53:12Z",
    "html_url":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1967682371",
    "pull_request_url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533",
    "author_association":"CONTRIBUTOR",
    "_links":{
      "self":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1967682371"
      },
      "html":{
        "href":"https:\/\/github.com\/google\/transit\/pull\/533#discussion_r1967682371"
      },
      "pull_request":{
        "href":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/533"
      }
    },
    "reactions":{
      "url":"https:\/\/api.github.com\/repos\/google\/transit\/pulls\/comments\/1967682371\/reactions",
      "total_count":0,
      "+1":0,
      "-1":0,
      "laugh":0,
      "hooray":0,
      "confused":0,
      "heart":0,
      "rocket":0,
      "eyes":0
    },
    "start_line":null,
    "original_start_line":null,
    "start_side":null,
    "line":330,
    "original_line":330,
    "side":"RIGHT",
    "original_position":58,
    "position":58,
    "subject_type":"line",
    "in_reply_to_id":1944913154.0
  }
]